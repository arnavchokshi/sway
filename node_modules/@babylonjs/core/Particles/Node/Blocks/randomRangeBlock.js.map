{"version":3,"file":"randomRangeBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Particles/Node/Blocks/randomRangeBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport { NodeParticleBlock } from \"../nodeParticleBlock\";\r\nimport type { NodeParticleConnectionPoint } from \"../nodeParticleBlockConnectionPoint\";\r\nimport type { NodeParticleBuildState } from \"../nodeParticleBuildState\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { ParticleRandomBlockLocks } from \"./particleRandomBlock\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Block used to pick a value randomly from a range\r\n */\r\nexport class RandomRangeBlock extends NodeParticleBlock {\r\n    private _currentLockId = -2;\r\n    /**\r\n     * Gets or sets a value indicating if that block will lock its value for a specific event\r\n     */\r\n    @editableInPropertyPage(\"LockMode\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        embedded: true,\r\n        options: [\r\n            { label: \"None\", value: ParticleRandomBlockLocks.None },\r\n            { label: \"Per particle\", value: ParticleRandomBlockLocks.PerParticle },\r\n            { label: \"Per system\", value: ParticleRandomBlockLocks.PerSystem },\r\n        ],\r\n    })\r\n    public lockMode = ParticleRandomBlockLocks.PerParticle;\r\n    /**\r\n     * Create a new RandomRangeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"min\", NodeParticleBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"max\", NodeParticleBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeParticleBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this.output._typeConnectionSource = this.min;\r\n\r\n        this._linkConnectionTypes(0, 1);\r\n        const excludedConnectionPointTypes = [\r\n            NodeParticleBlockConnectionPointTypes.Matrix,\r\n            NodeParticleBlockConnectionPointTypes.Particle,\r\n            NodeParticleBlockConnectionPointTypes.Texture,\r\n            NodeParticleBlockConnectionPointTypes.System,\r\n            NodeParticleBlockConnectionPointTypes.FloatGradient,\r\n            NodeParticleBlockConnectionPointTypes.Color4Gradient,\r\n            NodeParticleBlockConnectionPointTypes.Vector2Gradient,\r\n            NodeParticleBlockConnectionPointTypes.Vector3Gradient,\r\n        ] as const;\r\n\r\n        this.min.excludedConnectionPointTypes.push(...excludedConnectionPointTypes);\r\n        this.max.excludedConnectionPointTypes.push(...excludedConnectionPointTypes);\r\n    }\r\n\r\n    /**\r\n     * Gets the min input component\r\n     */\r\n    public get min(): NodeParticleConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the max input component\r\n     */\r\n    public get max(): NodeParticleConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"RandomRangeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Builds the block\r\n     */\r\n    public override _build() {\r\n        let func: Nullable<(state: NodeParticleBuildState) => any> = null;\r\n        this._currentLockId = -2;\r\n\r\n        switch (this.min.type) {\r\n            case NodeParticleBlockConnectionPointTypes.Float:\r\n            case NodeParticleBlockConnectionPointTypes.Int:\r\n                func = (state) => {\r\n                    const minValue = this.min.getConnectedValue(state);\r\n                    const maxValue = this.max.getConnectedValue(state);\r\n                    return Math.random() * (maxValue - minValue) + minValue;\r\n                };\r\n                break;\r\n            case NodeParticleBlockConnectionPointTypes.Vector2:\r\n                func = (state) => {\r\n                    const minValue = this.min.getConnectedValue(state);\r\n                    const maxValue = this.max.getConnectedValue(state);\r\n                    return new Vector2(Math.random() * (maxValue.x - minValue.x) + minValue.x, Math.random() * (maxValue.y - minValue.y) + minValue.y);\r\n                };\r\n                break;\r\n            case NodeParticleBlockConnectionPointTypes.Vector3:\r\n                func = (state) => {\r\n                    const minValue = this.min.getConnectedValue(state);\r\n                    const maxValue = this.max.getConnectedValue(state);\r\n                    return new Vector3(\r\n                        Math.random() * (maxValue.x - minValue.x) + minValue.x,\r\n                        Math.random() * (maxValue.y - minValue.y) + minValue.y,\r\n                        Math.random() * (maxValue.z - minValue.z) + minValue.z\r\n                    );\r\n                };\r\n                break;\r\n            case NodeParticleBlockConnectionPointTypes.Color4:\r\n                func = (state) => {\r\n                    const minValue = this.min.getConnectedValue(state);\r\n                    const maxValue = this.max.getConnectedValue(state);\r\n                    return new Color4(\r\n                        Math.random() * (maxValue.r - minValue.r) + minValue.r,\r\n                        Math.random() * (maxValue.g - minValue.g) + minValue.g,\r\n                        Math.random() * (maxValue.b - minValue.b) + minValue.b,\r\n                        Math.random() * (maxValue.a - minValue.a) + minValue.a\r\n                    );\r\n                };\r\n                break;\r\n        }\r\n\r\n        this.output._storedFunction = (state: NodeParticleBuildState) => {\r\n            let lockId = 0;\r\n\r\n            switch (this.lockMode) {\r\n                case ParticleRandomBlockLocks.PerParticle:\r\n                    lockId = state.particleContext?.id || -1;\r\n                    break;\r\n                case ParticleRandomBlockLocks.PerSystem:\r\n                    lockId = state.buildId || 0;\r\n                    break;\r\n            }\r\n\r\n            if (this._currentLockId !== lockId) {\r\n                if (this.lockMode !== ParticleRandomBlockLocks.None) {\r\n                    this._currentLockId = lockId;\r\n                }\r\n                this.output._storedValue = func!(state);\r\n            }\r\n            return this.output._storedValue;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.lockMode = this.lockMode;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        if (serializationObject.lockMode !== undefined) {\r\n            this.lockMode = serializationObject.lockMode;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RandomRangeBlock\", RandomRangeBlock);\r\n"]}